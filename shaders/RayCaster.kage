package main

// Declare uniform variables
var (
    TrianglesV1 vec3
    TrianglesV2 vec3
    TrianglesV3 vec3
    TrianglesColor vec3
    CameraPos vec3
    ViewPortRightCorner vec3
    ViewPortLeftCorner vec3
    ViewPortBottomCorner vec3
    ScreenWidth float
    ScreenHeight float
)

// Calculate the ray direction for the given pixel coordinates
func CalculateRayDirection(x, y float) vec3 {
    xStep := (ViewPortRightCorner - ViewPortLeftCorner) / ScreenWidth
    yStep := (ViewPortBottomCorner - ViewPortLeftCorner) / ScreenHeight
    
    // Ray direction in world space for the pixel (x, y)
    rayDir := ViewPortLeftCorner + xStep * x + yStep * y
    return normalize(rayDir - CameraPos)
}

// Check if a ray intersects with a triangle
func rayTriangleIntersect(rayOrigin, rayDir, v0, v1, v2 vec3) (float, bool) {
    epsilon := 0.000001
    edge1 := v1 - v0
    edge2 := v2 - v0
    h := cross(rayDir, edge2)
    a := dot(edge1, h)

    if a > -epsilon && a < epsilon {
        return 0.0, false
    }

    f := 1.0 / a
    s := rayOrigin - v0
    u := f * dot(s, h)

    if u < 0.0 || u > 1.0 {
        return 0.0, false
    }

    q := cross(s, edge1)
    v := f * dot(rayDir, q)

    if v < 0.0 || u+v > 1.0 {
        return 0.0, false
    }

    t := f * dot(edge2, q)

    if t > epsilon {
        return t, true
    }

    return 0.0, false
}

// Main fragment shader function
func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
    // Calculate pixel position based on screen size
    x := texCoord.x * ScreenWidth
    y := texCoord.y * ScreenHeight

    // Get ray direction from camera to pixel
    rayDir := CalculateRayDirection(x, y)
    
    // Perform ray-triangle intersection for the triangle defined by TrianglesV1, TrianglesV2, TrianglesV3
    t, hit := rayTriangleIntersect(CameraPos, rayDir, TrianglesV1, TrianglesV2, TrianglesV3)
    
    // If there is a hit, return the triangle color, otherwise return background color (black)
    if hit {
        return vec4(TrianglesColor, 1.0)
    } else {
        return vec4(0.0, 0.0, 0.0, 1.0) // background color
    }
}
