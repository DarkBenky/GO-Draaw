package main

var StartPosition vec3
var TopLeft vec3
var TopRight vec3
var BottomLeft vec3

func sdSphere(p vec3, s float) float {
    return length(p) - s
}

func sdBox(p vec3, size vec3) float {
    d := abs(p) - size
    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0)
}

func CalculateRayDir(xScreenPosition, yScreenPosition float) vec3 {
    xStep := (TopRight - TopLeft) / 800.0
    yStep := (BottomLeft - TopLeft) / 608.0
    
    return normalize(TopLeft + xStep * xScreenPosition + yStep * yScreenPosition)
}

func RayMarch(direction vec3, origin vec3) vec4 {
    const maxSteps = 64.0
    const epsilon = 0.01
    const maxDistance = 10000.0
    
    var distance float
    
    for i := 0.0; i < maxSteps; i++ {
        distance = sdSphere(origin, 10.0)
        
        if distance < epsilon {
            return vec4(1.0, 1.0, 1.0, 1.0)
        }
        
        if distance > maxDistance {
            break
        }
        
        origin += direction * distance
    }
    
    return vec4(0.2, 0.0, 0.0, 0.3)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
    direction := CalculateRayDir(position.x, position.y)
    return RayMarch(direction, StartPosition)
}