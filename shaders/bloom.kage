package main

var BloomThreshold float

func BoxBlur(texCoord vec2) vec4 {
    color := vec4(0)

    // Define offsets for a box blur
    offsets := [8]vec2{
        vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0),
        vec2(-1.0, 0.0),                      vec2(1.0, 0.0),
        vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0),
    }

    // Sample the surrounding pixels
    for i := 0; i < 8; i++ {
        // Apply offset and sample the color
        offset := offsets[i]
        offsetCoord := texCoord + offset / imageSrcTextureSize()
        color += imageSrc0At(offsetCoord)
    }

    // Return the average color
    return color / 8.0
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
    originalColor := imageSrc0At(texCoord)

    // Calculate luminance
    luminance := originalColor.r * 0.2126 + originalColor.g * 0.7152 + originalColor.b * 0.0722

    if luminance > BloomThreshold {
        blurredBrightColor := BoxBlur(texCoord) // Use BoxBlur instead of GaussianBlur
        // Mix original color with blurred color, ensuring we don't saturate
        resultColor := originalColor + blurredBrightColor * 0.25
        return clamp(resultColor, 0.0, 1.0) // Assuming clamp is a defined function
    } else {
        return originalColor
    }
}
